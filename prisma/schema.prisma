// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("PRISMA_DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  email               String?        @unique
  emailVerified       DateTime?
  image               String?
  isPlaceholder       Boolean        @default(false)
  accounts            Account[]
  sessions            Session[]
  groupMemberships    GroupMember[]
  paidExpenses        Expense[]      @relation("PaidExpenses")
  expenseSplits       ExpenseSplit[]
  paidSettlements     Settlement[]   @relation("PayerSettlements")
  receivedSettlements Settlement[]   @relation("ReceiverSettlements")
  createdGroups       Group[]        @relation("CreatedGroups")
  sentInvitations     GroupInvitation[] @relation("SentInvitations")
  acceptedInvitations GroupInvitation[] @relation("AcceptedInvitations")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     GroupMember[]
  expenses    Expense[]
  settlements Settlement[]
  invitations GroupInvitation[]
  createdById String
  createdBy   User   @relation("CreatedGroups", fields: [createdById], references: [id])
}

model GroupMember {
  id        String  @id @default(cuid())
  groupId   String
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([groupId, userId])
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Float
  category    String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  payerId String
  payer   User   @relation("PaidExpenses", fields: [payerId], references: [id])

  splits ExpenseSplit[]
}

model ExpenseSplit {
  id     String @id @default(cuid())
  amount Float

  expenseId String
  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
}

model Settlement {
  id        String   @id @default(cuid())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  payer   User   @relation("PayerSettlements", fields: [payerId], references: [id], onDelete: Cascade)
  payerId String

  receiver   User   @relation("ReceiverSettlements", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
}

model GroupInvitation {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  status    InvitationStatus @default(PENDING)
  createdAt DateTime @default(now())
  expiresAt DateTime
  acceptedAt DateTime?
  
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  
  invitedBy User     @relation("SentInvitations", fields: [invitedById], references: [id], onDelete: Cascade)
  invitedById String
  
  acceptedBy User?   @relation("AcceptedInvitations", fields: [acceptedById], references: [id], onDelete: SetNull)
  acceptedById String?
  
  @@unique([groupId, email])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}
